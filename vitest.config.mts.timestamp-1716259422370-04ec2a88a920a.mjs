// vitest.config.mts
import { defineConfig as defineConfig2, mergeConfig } from "file:///E:/Project/vue-app/node_modules/.pnpm/vitest@1.4.0_@types+node@20.11.30_@vitest+ui@1.4.0_jsdom@24.0.0_sass@1.72.0_terser@5.30.0/node_modules/vitest/dist/config.js";

// vite.config.mts
import Legacy from "file:///E:/Project/vue-app/node_modules/.pnpm/@vitejs+plugin-legacy@5.3.2_terser@5.30.0_vite@5.2.6/node_modules/@vitejs/plugin-legacy/dist/index.mjs";
import Vue from "file:///E:/Project/vue-app/node_modules/.pnpm/@vitejs+plugin-vue@5.0.4_vite@5.2.6_vue@3.4.21/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import path from "path";
import { visualizer } from "file:///E:/Project/vue-app/node_modules/.pnpm/rollup-plugin-visualizer@5.12.0/node_modules/rollup-plugin-visualizer/dist/plugin/index.js";
import AutoImport from "file:///E:/Project/vue-app/node_modules/.pnpm/unplugin-auto-import@0.17.5_@vueuse+core@10.9.0/node_modules/unplugin-auto-import/dist/vite.js";
import ElementPlus from "file:///E:/Project/vue-app/node_modules/.pnpm/unplugin-element-plus@0.8.0/node_modules/unplugin-element-plus/dist/vite.mjs";
import IconsResolver from "file:///E:/Project/vue-app/node_modules/.pnpm/unplugin-icons@0.18.5/node_modules/unplugin-icons/dist/resolver.js";
import Icons from "file:///E:/Project/vue-app/node_modules/.pnpm/unplugin-icons@0.18.5/node_modules/unplugin-icons/dist/vite.js";
import { ElementPlusResolver } from "file:///E:/Project/vue-app/node_modules/.pnpm/unplugin-vue-components@0.26.0_vue@3.4.21/node_modules/unplugin-vue-components/dist/resolvers.js";
import Components from "file:///E:/Project/vue-app/node_modules/.pnpm/unplugin-vue-components@0.26.0_vue@3.4.21/node_modules/unplugin-vue-components/dist/vite.js";
import { defineConfig } from "file:///E:/Project/vue-app/node_modules/.pnpm/vite@5.2.6_@types+node@20.11.30_sass@1.72.0_terser@5.30.0/node_modules/vite/dist/node/index.js";
import Compression from "file:///E:/Project/vue-app/node_modules/.pnpm/vite-plugin-compression@0.5.1_vite@5.2.6/node_modules/vite-plugin-compression/dist/index.mjs";
import Dts from "file:///E:/Project/vue-app/node_modules/.pnpm/vite-plugin-dts@3.8.1_@types+node@20.11.30_typescript@5.4.3_vite@5.2.6/node_modules/vite-plugin-dts/dist/index.mjs";
import Inspect from "file:///E:/Project/vue-app/node_modules/.pnpm/vite-plugin-inspect@0.8.3_vite@5.2.6/node_modules/vite-plugin-inspect/dist/index.mjs";
import VueDevTools from "file:///E:/Project/vue-app/node_modules/.pnpm/vite-plugin-vue-devtools@7.0.25_vite@5.2.6_vue@3.4.21/node_modules/vite-plugin-vue-devtools/dist/vite.mjs";
var __vite_injected_original_dirname = "E:\\Project\\vue-app";
var pathSrc = path.resolve(__vite_injected_original_dirname, "src");
var vite_config_default = defineConfig({
  resolve: {
    /**
     * 当使用文件系统路径的别名时，请使用绝对路径
     */
    alias: {
      "@": pathSrc
    }
  },
  build: {
    /**
     * 混淆器
     *  - boolean：设置为 false 可以禁用最小化混淆
     *  - esbuild：默认为 Esbuild，它比 terser 快 20-40 倍，压缩率只差 1%-2%（打包速度最快）
     *  - terser：当设置为 'terser' 时必须先安装 Terser（打包体积最小）
     */
    minify: "esbuild",
    /**
     * chunk 大小警告的限制
     * 默认 500（单位：kbs）
     */
    chunkSizeWarningLimit: 1e3,
    /**
     * rollup 打包后的静态资源名称格式
     * vite 基于 rollup 打包，打包后的 chunk（代码块）后静态资源名称比较简单，
     * 使用命名规则可以确保在每次构建应用程序时，文件的名称都会随着内容的更改而变化，
     * 可以避免浏览器缓存旧版本文件的问题，并确保每次部署新的构建版本时，浏览器可以正确加载更新的文件
     */
    rollupOptions: {
      output: {
        chunkFileNames: "static/js/[name]-[hash].js",
        // 引入文件
        entryFileNames: "static/js/[name]-[hash].js",
        // 包的入口文件
        assetFileNames: "static/[ext]/[name]-[hash].[ext]",
        // 资源文件
        // 自动合并小 chunk（单位：b）
        experimentalMinChunkSize: 1024 * 10,
        // 通过 () => import() 形式加载的组件会自动分包，部分第三方插件手动分包
        manualChunks: {
          vue: ["vue", "vue-router", "pinia"],
          "element-plus-icons": ["@element-plus/icons-vue"],
          "element-plus": ["element-plus"],
          "lodash-es": ["lodash-es"],
          "docx-preview": ["docx-preview"],
          html2canvas: ["html2canvas"],
          luckyexcel: ["luckyexcel"],
          exceljs: ["exceljs"],
          jspdf: ["jspdf"],
          three: ["three"],
          echarts: ["echarts"],
          sortablejs: ["sortablejs"],
          ol: ["ol"]
        }
      }
    }
  },
  esbuild: {
    // minify: 'esbuild' 模式下，生产环境删除 console & debugger
    // drop: ['console', 'debugger'],
  },
  plugins: [
    Vue(),
    Icons({
      autoInstall: true
      // 编译方式
      // compiler: 'vue3',
    }),
    /**
     * 自动引入 vue 等插件 hooks
     */
    AutoImport({
      imports: ["vue", "vue-router", "vitest"],
      // 配置文件生成位置
      dts: path.resolve("src/types/auto-imports.d.ts"),
      // 自定义组件解析器
      resolvers: [ElementPlusResolver(), IconsResolver()]
    }),
    /**
     * 自动引入自定义组件
     */
    Components({
      // 指定组件位置，默认是 src/components
      dirs: ["src/components"],
      // 组件的有效文件扩展名。
      extensions: ["vue"],
      // 配置文件生成位置
      dts: path.resolve("src/types/components.d.ts"),
      // 自动导入指令
      // 默认值：Vue 3 的 `true`，Vue 2 的 `false`
      // 需要 Babel 来为 Vue 2 进行转换，出于性能考虑，它默认处于禁用状态。
      // directives: true,
      // 自定义组件解析器
      resolvers: [
        ElementPlusResolver(),
        IconsResolver({
          enabledCollections: ["ep"]
        })
      ]
    }),
    /**
     * 检查插件
     */
    Inspect(),
    /**
     * 生成类型声明文件
     */
    Dts(),
    /**
     * 为 Element Plus 按需引入样式
     */
    ElementPlus({}),
    /**
     * 增强 Vue 开发者体验
     */
    VueDevTools(),
    /**
     * 兼容旧版浏览器
     */
    Legacy({
      targets: ["defaults", "not IE 11"]
    }),
    /**
     * 方式一.打包时进行 gzip 压缩
     * 1.visualizer()
     * 2.服务器安装 nginx 时需要安装 'http_gzip_static_module'
     *   - ./configure --prefix=/usr/local/nginx --with-http_gzip_static_module
     *   - make && make install
     * 3.配置 nginx.conf
     *   - server {
     *   -     listen       3000;
     *   -     server_name  localhost;
     *   -     location / {
     *   -         root   /home/static/demo/dist;
     *   -         index  index.html index.htm;
     *   -         try_files $uri $uri/ /index.html;
     *   -         gzip_static on; # 静态压缩
     *   -     }
     *   - }
     *
     * 方式二.Nginx 直接配置开启 gzip 压缩
     * 1.服务器安装 nginx 时需要安装 'http_gzip_static_module'
     *   - ./configure --prefix=/usr/local/nginx --with-http_gzip_static_module
     *   - make && make install
     * 2.配置 nginx.conf
     *   - http {
     *   -    gzip_static on; # 开启 gzip 压缩
     *   -    gzip_comp_level 2; # 压缩级别，1-9，数字越大压缩效果越好，也越占用 cpu
     *   -    gzip_min_length 10k; # 压缩阈值，文件大于 10k 才进行压缩
     *   -    gzip_vary on; # 是否在 http header 中添加 Vary: Accept-Encoding，建议开启
     *   -    ...
     *   - }
     */
    Compression({
      verbose: true,
      // 是否在控制台中输出压缩结果
      disable: false,
      threshold: 1024 * 10,
      // 如果体积大于阈值，将被压缩（单位：b）；体积过小时不要压缩，以免适得其反
      algorithm: "gzip",
      // 压缩算法
      ext: ".gz",
      deleteOriginFile: false
      // 压缩后是否删除源文件
    }),
    /**
     * 可以展示构建时长、chunk 数量及大小
     * PS：需要将 visualizer 插件放到最后的位置
     */
    visualizer({
      gzipSize: true,
      brotliSize: true,
      emitFile: false,
      filename: "stats.html",
      // 分析图生成的文件名
      open: false
      // 如果存在本地服务端口，将在打包后自动展示
    })
  ]
});

// vitest.config.mts
var vitest_config_default = mergeConfig(
  vite_config_default,
  defineConfig2({
    test: {
      // 匹配包含测试文件的 glob 规则
      include: ["**/*.{test,spec}.?(c|m)[jt]s?(x)"],
      // 匹配排除测试文件的 glob 规则
      exclude: [
        "**/node_modules/**",
        "**/dist/**",
        "**/cypress/**",
        "**/.{idea,git,cache,output,temp}/**",
        "**/{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tsup,build}.config.*"
      ],
      // 生成 html 文件夹
      reporters: ["default", "html"],
      // 显式提供全局 API
      globals: true,
      // 类型检查
      typecheck: {
        allowJs: true
      }
    }
  })
);
export {
  vitest_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
